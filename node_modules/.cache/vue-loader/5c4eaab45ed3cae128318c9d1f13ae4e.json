{"remainingRequest":"/Users/lirongzhi/Documents/深圳善链/h5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lirongzhi/Documents/深圳善链/h5/src/view/login/Geet.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lirongzhi/Documents/深圳善链/h5/src/view/login/Geet.vue","mtime":1572538946793},{"path":"/Users/lirongzhi/Documents/深圳善链/h5/node_modules/cache-loader/dist/cjs.js","mtime":1572539003414},{"path":"/Users/lirongzhi/Documents/深圳善链/h5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\n  import { Toast } from 'vant';\n  import { Dialog } from 'vant';\n\nexport default {\n  components: {\n    Toast,\n    Dialog\n  },\n  data() {\n    return {};\n  },\n  //   接受父组件传递的值，用来控制图形验证的加载\n  props: [\"isGeet\"],\n  mounted() {\n\n  },\n  methods: {\n    GtCaptcha() {\n      // Toast.loading({\n      //   mask: true,\n      //   duration: 0,\n      //   message: '加载中...'\n      // });\n\n      let _this = this;\n      //   此url是极验官网的测试请求地址，加随机数防止缓存\n      _this.axios\n        .get(\n          \"https://www.geetest.com/demo/gt/register-slide?t=\" +\n            new Date().getTime()\n        )\n        .then(res => {\n          // 关闭提示\n          // Toast.clear();\n\n          // 极验第一次，请求回来的参数\n          let data = res.data;\n          var handlerEmbed = function(captchaObj) {\n            //   图形验证成功\n            captchaObj\n              .onSuccess(function() {\n                var result = captchaObj.getValidate();\n                let param = {\n                  geetest_challenge: result.geetest_challenge,\n                  geetest_validate: result.geetest_validate,\n                  geetest_seccode: result.geetest_seccode,\n                  status: data.success\n                };\n                // 极验校验的参数，将其传给服务端，进行校验。\n                _this.$emit(\"geetPath\", param);\n              })\n              .onError(function() {\n                //   图形验证失败\n                Dialog.alert({\n                  title: '登录提示',\n                  message: '网络不稳定，请点击确定重新加载本页面'\n                }).then(() => {\n                  window.location.reload()\n                });\n              });\n            //   为此页面的虚拟按钮添加点击事件\n            _this.$refs.btn.addEventListener(\"click\", function demo() {\n              // 极验图片触发之后，修改控制变量额布尔值，实现再次触发\n              _this.$emit(\"clickChange\", false);\n              if (_this.isGeet) {\n                captchaObj.verify();\n              }\n            });\n          };\n          //   初始化极验\n          _this.$initGeet(\n            {\n              gt: data.gt,\n              challenge: data.challenge,\n              product: \"bind\",\n              offline: !data.success,\n              https: true\n            },\n            handlerEmbed\n          );\n        })\n        .catch(res => {\n          // 重新执行\n          // this.$router.go(0);\n        });\n    }\n  },\n\n  computed: {},\n\n  created() {\n    // 页面创建，调用函数\n    this.GtCaptcha();\n  },\n\n  mounted() {},\n  watch: {\n    // 监听参数的变化，调用极验\n    isGeet: function() {\n      //   这里通过按钮事件调用极验\n      this.$refs.btn.click();\n    }\n  }\n};\n",{"version":3,"sources":["Geet.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Geet.vue","sourceRoot":"src/view/login","sourcesContent":["<template>\n  <div>\n    <i ref=\"btn\"></i>\n  </div>\n</template>\n<script>\n  import { Toast } from 'vant';\n  import { Dialog } from 'vant';\n\nexport default {\n  components: {\n    Toast,\n    Dialog\n  },\n  data() {\n    return {};\n  },\n  //   接受父组件传递的值，用来控制图形验证的加载\n  props: [\"isGeet\"],\n  mounted() {\n\n  },\n  methods: {\n    GtCaptcha() {\n      // Toast.loading({\n      //   mask: true,\n      //   duration: 0,\n      //   message: '加载中...'\n      // });\n\n      let _this = this;\n      //   此url是极验官网的测试请求地址，加随机数防止缓存\n      _this.axios\n        .get(\n          \"https://www.geetest.com/demo/gt/register-slide?t=\" +\n            new Date().getTime()\n        )\n        .then(res => {\n          // 关闭提示\n          // Toast.clear();\n\n          // 极验第一次，请求回来的参数\n          let data = res.data;\n          var handlerEmbed = function(captchaObj) {\n            //   图形验证成功\n            captchaObj\n              .onSuccess(function() {\n                var result = captchaObj.getValidate();\n                let param = {\n                  geetest_challenge: result.geetest_challenge,\n                  geetest_validate: result.geetest_validate,\n                  geetest_seccode: result.geetest_seccode,\n                  status: data.success\n                };\n                // 极验校验的参数，将其传给服务端，进行校验。\n                _this.$emit(\"geetPath\", param);\n              })\n              .onError(function() {\n                //   图形验证失败\n                Dialog.alert({\n                  title: '登录提示',\n                  message: '网络不稳定，请点击确定重新加载本页面'\n                }).then(() => {\n                  window.location.reload()\n                });\n              });\n            //   为此页面的虚拟按钮添加点击事件\n            _this.$refs.btn.addEventListener(\"click\", function demo() {\n              // 极验图片触发之后，修改控制变量额布尔值，实现再次触发\n              _this.$emit(\"clickChange\", false);\n              if (_this.isGeet) {\n                captchaObj.verify();\n              }\n            });\n          };\n          //   初始化极验\n          _this.$initGeet(\n            {\n              gt: data.gt,\n              challenge: data.challenge,\n              product: \"bind\",\n              offline: !data.success,\n              https: true\n            },\n            handlerEmbed\n          );\n        })\n        .catch(res => {\n          // 重新执行\n          // this.$router.go(0);\n        });\n    }\n  },\n\n  computed: {},\n\n  created() {\n    // 页面创建，调用函数\n    this.GtCaptcha();\n  },\n\n  mounted() {},\n  watch: {\n    // 监听参数的变化，调用极验\n    isGeet: function() {\n      //   这里通过按钮事件调用极验\n      this.$refs.btn.click();\n    }\n  }\n};\n</script>\n<style scoped></style>\n"]}]}